{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCat","useState","inputVale","setInputVale","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAkB,IAAfC,EAAc,EAAdA,OAAc,EAEPC,mBAAS,IAFF,mBAElCC,EAFkC,KAEvBC,EAFuB,KAqBzC,OAEI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAUK,OAAOC,OAAS,IAE7BR,GAAQ,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OAC/BN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCNjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCARO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGtC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAOjB,EAAMkB,IAAOR,IACzB,4BAAKA,QCHJS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EAEdd,mBAAU,CAChCqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAC,GAECH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAK1B,CAAEtB,IAGEuB,EDTyBK,CAAc5B,GAAhC2B,EAVyB,EAU/BpB,KAAYe,EAVmB,EAUnBA,QAGpB,OACI,qCACG,qBAAIJ,UAAW,oCAAf,cAAsDlB,EAAtD,OACEsB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEb,qBAAKA,UAAU,YAAf,SAMSS,EAAKlB,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAGSA,GADGA,EAAIC,aEWzBkB,EArCM,WAAO,IAAD,EACa3C,mBAAS,CAAC,cADvB,mBAChB4C,EADgB,KACJC,EADI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa9C,OAAW8C,IACxB,uBAEA,6BAGQD,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAaA,GADNA,Y,MCxBnCgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.46abd71f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCat } ) => {\r\n    \r\n    const [inputVale, setInputVale] = useState('');\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputVale( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n       // console.log('Submit hecho');\r\n\r\n       if( inputVale.trim().length > 2 )\r\n       {\r\n        setCat( cats => [inputVale, ...cats] );\r\n        setInputVale( '' );\r\n       }\r\n       \r\n        \r\n    };\r\n\r\n    return (\r\n        \r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type='text'\r\n                value={ inputVale }\r\n                onChange={ handleInputChange }\r\n            >\r\n            </input>   \r\n        </form>\r\n        \r\n        \r\n    );\r\n\r\n    AddCategory.prototype = {\r\n        setCat: PropTypes.func.isRequired\r\n    }\r\n\r\n    \r\n}\r\n","\r\n\r\n export const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=0PAOXJiTzWaZrVuFTvBSsn3j3ZIxS1jx`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return (gifs);\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src= { url } alt= { title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect( () => {\r\n    //    getGifs( category )\r\n    //     .then( imgs => setImages( imgs ) );\r\n    // }, [ category ])\r\n\r\n    //const state = useFetchGifs();\r\n    const { data: imgs, loading } = useFetchGifs( category );\r\n\r\n   \r\n    return (\r\n        <>\r\n           <h3 className= \"animate__animated animate__bounce\"> { category } </h3>\r\n           { loading && <p className=\"animate__animated animate__flash\"> Loading</p> }\r\n\r\n           <div className='card-grid'>                       \r\n                {\r\n                    // images.map( img => (\r\n                    //     <li key={ img.id }>{ img.title }</li>\r\n                    // ))\r\n                    //o tammbien\r\n                    imgs.map( img =>(\r\n                        <GifGridItem \r\n                            \r\n                            key = { img.id }\r\n                            { ...img }\r\n                        >\r\n\r\n                        </GifGridItem>\r\n                    ))\r\n                }\r\n           \r\n            </div> \r\n            \r\n        </>\r\n    )       \r\n        \r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState( {\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    } );\r\n              \r\n                \r\n            })\r\n    }, [ category ])\r\n\r\n   \r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\nconst GifExpertApp = () => { \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n   //const handleAdd = () => {\r\n        // los puntos son los espacios del arreglo osea es . = one punch, . = Samurai, . = Dragon\r\n       //setcategories( ...categories, 'Kuroko No Basket' ); \r\n\r\n       // cats es el valor del estado anterior y luego mas el nuevo elemento en el estado anterior\r\n       //setcategories ( cats => [...cats, 'Kuroko No Basket']); \r\n\r\n    //};\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCat = { setCategories }></AddCategory>\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    // Mao es como un loop\r\n                    categories.map( category => (\r\n                        //return <li key={ category }> { category } </li>\r\n                        <GifGrid \r\n                            key= { category }\r\n                            category = { category } >\r\n                                \r\n                        </GifGrid>\r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}